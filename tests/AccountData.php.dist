<?php

declare(strict_types=1);

namespace MStilkerich\Tests\CardDavClient;

use MStilkerich\CardDavClient\{Account,AddressbookCollection,Config};

final class AccountData
{
    public const ACCOUNTS = [
        /*
        "iCloud" => [
            "username" => "icloudid@example.com",
            "password" => "foobar",
            "discoveryUri" => "icloud.com",

            // For providers that report extra changes or deleted cards between two syncs, set this to true to limit the
            // sync tests to check whether all known changes are actually reported, without raising an error on any
            // additional changes that the server reports. (Google has been observed to behave like this)
            "syncAllowExtraChanges" => false,
        ],
        "Google" => [
            "username" => "gmailid@example.com",
            "password" => "foobar",
            "discoveryUri" => "gmail.com",
            "syncAllowExtraChanges" => true,
        ],
        "Nextcloud" => [
            "username" => "nextcloudUser",
            "password" => "foobar",
            "discoveryUri" => "example.com",
            "syncAllowExtraChanges" => false,
        ],
        "Baikal" => [
            "username" => "baikalUser",
            "password" => "foobar",
            "discoveryUri" => "http://baikal.localhost",
            "syncAllowExtraChanges" => false,
        ],
        "BaikalKrb" => [
            "username" => "",
            "password" => "",
            "discoveryUri" => "http://baikal.example.com",
            "syncAllowExtraChanges" => false,
        ],
        "Owncloud" => [
            "username" => "owncloudUser",
            "password" => "foobar",
            "discoveryUri" => "http://localhost/owncloud/remote.php/dav/addressbooks/users/owncloudUser/contacts/",
            "syncAllowExtraChanges" => false,
        ],
         */
        "Radicale" => [
            "username" => "radicaleUser",
            "password" => "foobar",
            "discoveryUri" => "http://localhost:5232/",
            "syncAllowExtraChanges" => false,
        ],
        /*
        "Davical" => [
            "username" => "davicalUser",
            "password" => "foobar",
            "discoveryUri" => "http://localhost/davical",
            "syncAllowExtraChanges" => false,
        ],
         */
    ];

    public const ADDRESSBOOKS = [
        /*
        "iCloud" => [
            "account" => "iCloud",
            "url" => "https://pXX-contacts.icloud.com:443/1234567/carddavhome/card/",
            "displayname" => "card",
            "supports_synccoll" => true,
            "supports_multiget" => true,
            "supports_ctag" => false,
        ],
        "Google" => [
            "account" => "Google",
            "url" => "https://www.googleapis.com:443/carddav/v1/principals/gmailid@example.com/lists/default/",
            "displayname" => "Address Book",
            "supports_synccoll" => true,
            "supports_multiget" => true,
            "supports_ctag" => true,
        ],
        "Nextcloud" => [
            "account" => "Nextcloud",
            "url" => "https://www.example.com:443/nextcloud/remote.php/dav/addressbooks/users/nextcloudUser/contacts/",
            "displayname" => "Contacts",
            "supports_synccoll" => true,
            "supports_multiget" => true,
            "supports_ctag" => true,
        ],
        "Owncloud" => [
            "account" => "Owncloud",
            "url" => "http://localhost:80/owncloud/remote.php/dav/addressbooks/users/owncloudUser/contacts/",
            "displayname" => "Contacts",
            "supports_synccoll" => true,
            "supports_multiget" => true,
            "supports_ctag" => true,
        ],
        "Baikal_First" => [
            "account" => "Baikal",
            "url" => "http://baikal.localhost/dav.php/addressbooks/baikalUser/default/",
            "displayname" => "Default Address Book",
            "supports_synccoll" => true,
            "supports_multiget" => true,
            "supports_ctag" => true,
        ],
        "Baikal_Second" => [
            "account" => "Baikal",
            "url" => "http://baikal.localhost/dav.php/addressbooks/baikalUser/abook2/",
            "displayname" => "Addressbook 2",
            "supports_synccoll" => true,
            "supports_multiget" => true,
            "supports_ctag" => true,
        ],
        "BaikalKrb_First" => [
            "account" => "BaikalKrb",
            "url" => "http://baikal.example.com/dav.php/addressbooks/baikalUser/default/",
            "displayname" => "Default Address Book",
            "supports_synccoll" => true,
            "supports_multiget" => true,
            "supports_ctag" => true,
        ],
         */
        "Radicale" => [
            "account" => "Radicale",
            "url" => "http://localhost:5232/radicaleUser/abcdef/",
            "displayname" => "The radical addressbook",
            "supports_synccoll" => true,
            "supports_multiget" => true,
            "supports_ctag" => true,
        ],
        /*
        "Davical_0" => [
            "account" => "Davical",
            "url" => "http://localhost/davical/caldav.php/davicalUser/addresses/",
            "displayname" => "Test addressbook",
            "supports_synccoll" => true,
            "supports_multiget" => true,
            "supports_ctag" => true,
        ],
         */
    ];

    /** @var Account[] Caches the Account objects for all accounts from ACCOUNTS*/
    public static $accounts = [];

    /** @var AddressbookCollection[] Caches the AddressbookCollection objects for all addressbooks from ADDRESSBOOKS */
    public static $addressbooks = [];

    public static function init(): void
    {
        if (empty(self::$accounts)) {
            if (file_exists('testreports/tests.log')) {
                unlink('testreports/tests.log');
            }
            if (file_exists('testreports/tests_http.log')) {
                unlink('testreports/tests_http.log');
            }

            Config::init(
                $logger = new \Wa72\SimpleLogger\FileLogger('testreports/tests.log', \Psr\Log\LogLevel::DEBUG),
                $logger = new \Wa72\SimpleLogger\FileLogger('testreports/tests_http.log', \Psr\Log\LogLevel::DEBUG)
            );
        }

        foreach (self::ACCOUNTS as $name => $cfg) {
            self::$accounts[$name] = new Account($cfg["discoveryUri"], $cfg["username"], $cfg["password"]);
        }

        foreach (self::ADDRESSBOOKS as $name => $cfg) {
            self::$addressbooks[$name] = new AddressbookCollection($cfg["url"], self::$accounts[$cfg["account"]]);
        }
    }

    public static function accountProvider(): array
    {
        $ret = [];
        foreach (self::ACCOUNTS as $name => $cfg) {
            $ret[$name] = [ $name, $cfg ];
        }
        return $ret;
    }

    public static function addressbookProvider(): array
    {
        $ret = [];
        foreach (self::ADDRESSBOOKS as $name => $cfg) {
            $ret[$name] = [ $name, $cfg ];
        }
        return $ret;
    }
}

// vim: ts=4:sw=4:expandtab:fenc=utf8:ff=unix:tw=120:ft=php
